ALWAYS READ ME FIRST!!!!!:
- FILTER AND CODE ON THE RIGHT SIDE WORKS, UNDERSTAND AND TRY TO IMPLEMENT INTO THE PROJECT 

* NOTES *
1. Firestore user auth
2. Stripe/Razorpay for payment? Or add to cart and contact whatsapp for payment #MAYBE? TBC?
3. Sign up and Sign in for auth users firebase/firestore 
4. Check out as guest 
5. Dark mode needs to be fixed for Shop.jsx

== 17 JAN 2025 == Cart's dynamic function
1. Fixed Navbar's Cart dynamic function
    - 1. import { useCart } from '../../Context/CartContext' -> To Navbar.jsx
    - 2. Extract { cart } from useCart() and declaring varialbe as -> const { cart } = useCart() in Navbar.jsx
    - 3. Create a reducer to calculate the total item count in the array -> const cartItemCount = cart.reduce
    ((total, item) => total + item.quantity, 0)
    - 4. Call/Insert the variable {cartItemCount} from the reducer to display

== 20 JAN 2025 ==
1. Learned .filter() and .sort() to filter/sort array of objects based on selected methods -> refer to Notion for learning's detail 
2. Code examples in Notion are because array of objects are in the same .jsx page
    i. How to correctly pass the array of objects from Products.jsx to Shop.jsx to pass in the filter/sort method ../src/App.jsx 

// == 25 JAN 2025 ==
// 1. After copying the new code the product grid view does not work * DONE *

FIXME: * TRY TO UNDERSTAND THE FILTER CODE *
TODO: Compare code from new code in chatGPT and the code saved on the right 
Update the filter state to include categories. -> * useState *
Modify the filter handler to handle both brands and categories. -> * Focuses on how the application collects and stores user selections when they interact with the filter checkboxes. *
Adjust the filtering logic to include category filtering. -> * Filtering happens based on the user's selections stored in state (from Step 2). It dynamically updates the product list based on the selected filters. *
Update the UI to include category checkboxes. -> * Update the filter UI and to <input> and then to product grid to .map it out *

== 28 JAN 2025 ==
- Fixed the Sort button's menu by adding bg-white to the <MenuItems> component in Shop.jsx and added hover effects on <MenuItems> links

FIXME: * TRY TO UNDERSTAND THE SEARCH FUNCTION CODE *
== 3 FEB 2025 ==
- Searchbar and Searchresult page are now working 
- How do I implement the same layout like Shop.jsx into the Searchresult page when searching * Copied the UI from Shop.jsx *
- Sort function not fixed(?)
- SEARCHRESULT PAGE === SHOP PAGE * filtered the search results and do results.map instead of the filteredProducts.map *

== 10 FEB 2025 ==
- To start implementing sort function 
- Local storage for cart? Maybe look at backend firestore/firebase
- Try and understand the search function

== 16 FEB 2025 ==
- Sort function *implemented* in Shop.jsx 
- Local storage for cart? Maybe look at backend firestore/firebase
- Setup guest checkout page

== 17 FEB 2025 ==
- Implemented localStorage + Firestore/Firebase hybrid for CartContext.jsx
- Increased item quantity selection from 5 -> 10 in Cart.jsx
- To setup guest checkout page
- Try and understand localStorage + Firestore/Firebase hybrid for the updated CartContext.jsx
